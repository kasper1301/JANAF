#!/usr/bin/julia

# Includes
include("calculatePolynomialCoefficients.jl")      # Function to calculate cp(T)
include("getReferenceStates.jl")           # Function to obtain reference values
include("idealGas.jl")                        # Set of functions for ideal gases

# User values
componentNames = ["O2",                                        # Component names
                   "N2",
                   "CO2",
                   "CO",
                   "NO2",
                   "NO",
                   "CH4",
                   "H2",
                   "H2O"]
createPlot      = true                          # flag to switch plotting on/off
polynomialOrder = 20                          # Order of the polynomial in cp(T)
p_ref           = 1.0e5                                # Reference pressure [Pa]
p               = p_ref                                          # Pressure [Pa]
T               = linspace(100,6000,5000)                      # Temperature [K]
x               = ones(length(componentNames),1) /
                  length(componentNames)                        # Mole fractions

# Folder and file names
dataFolder          = "data/"                          # Folder of the csv files
files               = ["Oxygen_(O2)_O2(ref).csv",               # csv file names
                       "Nitrogen_(N2)_N2(ref).csv",
                       "Carbon_Dioxide_(CO2)_C1O2(g).csv",
                       "Carbon_Monoxide_(CO)_C1O1(g).csv",
                       "Nitrogen_Oxide_(NO2)_N1O2(g).csv",
                       "Nitrogen_Oxide_(NO)_N1O1(g).csv",
                       "Methane_(CH4)_C1H4(g).csv",
                       "Hydrogen_(H2)_H2(ref).csv",
                       "Water_(H2O)_H2O1(g).csv"]


if createPlot
    using PyPlot
    # Configure global plot settings
    rc("text", usetex=true)
    rc("font", family="serif")
    rc("text.latex", preamble="\\usepackage{mhchem}")
end

# Calculate the coefficients of the heat capacity polynomials
# optionally plot the result
cpCoeffs = calculatePolynomialCoefficients(files, names, dataFolder,
                                           polynomialOrder, createPlot)

# Extract the reference values
(T_ref, s_ref, h_ref) = getReferenceStates(files, string(dataFolder,"ref/"))

# Check if all the reference temperatures are equal
if sum(T_ref .== T_ref[1]) == length(T_ref)
    T_ref = T_ref[1]                                 # Reference temperature [K]
else
    error("T_ref must be equal for all components.")
end

if createPlot
    h_ig    = zeros(length(names),length(T))  # Ideal gas enthalpy [kJ mol^{-1}]
    s_ig    = copy(h_ig)                 # Ideal gas entropy [J K^{-1} mol^{-1}]
    mu_ig   = copy(h_ig)            # Ideal gas chemical potential [kJ mol^{-1}]

    # Calculate the enthalpy, entropy and chemical potential for all T
    for i = 1:length(T)
        h_ig[:,i]   = calculateIdealEnthalpy(T[i], T_ref,
                                             h_ref, cpCoeffs)/1000
        s_ig[:,i]   = calculateIdealEntropy(T[i], T_ref, p, p_ref,
                                            s_ref, cpCoeffs)
        mu_ig[:,i]  = calculateIdealPotential(T[i], T_ref, p, p_ref, 
                                              h_ref, s_ref, cpCoeffs)/1000
    end

    # Plot the results for all the files
    for i = 1:length(files)
        # Import data
        data    = readdlm(string(dataFolder, files[i]),
                          ',', Float64; skipstart=1)
        T_data  = data[:,1]                                    # Temperature [K]
        s_data  = data[:,3]                        # Entropy [J K^{-1} mol^{-1}]
        h_data  = data[:,4]/1000                        # Enthalpy [kJ mol^{-1}]
        mu_data = data[:,5]/1000              # Chemical potential [kJ mol^{-1}]

        figure(i)                                              # Generate figure
            subplot(311)                                  # Subplot for enthalpy
                title("\\ce{$(names[i])}")                           # Add title
                plot(T_data, h_data, "kx")                           # Plot data
                plot(T, h_ig[i,:]', "r")                # Plot calculated values
                ylabel(                                            # Add y-label
                        string("\$ h_\\ce{$(names[i])}^{\\mathrm{ig}}\\quad",
                               "\\left[\\mathrm{kJ mol^{-1}}\\right]\$")
                      )
            subplot(312)                                   # Subplot for entropy
                plot(T_data, s_data, "kx")                           # Plot data
                plot(T, s_ig[i,:]', "r")                # Plot calculated values
                ylabel(                                            # Add y-label
                        string("\$ s_\\ce{$(names[i])}^{\\mathrm{ig}}\\quad",
                               "\\left[\\mathrm{J K^{-1} mol^{-1}}\\right]\$")
                      )
            subplot(313)                        # Subplot for chemical potential
                plot(T_data, mu_data, "kx")                          # Plot data
                plot(T, mu_ig[i,:]', "r")               # Plot calculated values
                ylabel(                                            # Add y-label
                        string("\$ \\mu_\\ce{$(names[i])}^{\\mathrm{ig}}\\quad",
                               "\\left[\\mathrm{kJ mol^{-1}}\\right]\$")
                      )
            xlabel("\$T \\quad [\\mathrm{K}] \$")                  # Add x-label
            savefig(string("fig/", names[i], "_h_s_mu.pdf"))          # Save pdf
            close()                                               # Close figure
    end
end